{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/czar/ipe/intelliplant/App.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport * as Font from \"expo-font\";\nimport { AppLoading } from \"expo\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createMaterialBottomTabNavigator } from \"@react-navigation/material-bottom-tabs\";\nimport { createDrawerNavigator, DrawerContentScrollView } from \"@react-navigation/drawer\";\nimport SignInScreen from \"./screens/SignInScreen\";\nimport SignUpScreen from \"./screens/SignUpScreen\";\nimport SensoresScreen from \"./screens/SensoresScreen\";\nimport DataScreen from \"./screens/DataScreen\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as firebase from \"firebase\";\nimport cor from \"./constants/colors\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA9sAULTDVdnvTDYWJHTxHzsecrvMYV-T4\",\n  authDomain: \"plantaintel.firebaseapp.com\",\n  databaseURL: \"https://plantaintel.firebaseio.com\",\n  projectId: \"plantaintel\",\n  storageBucket: \"plantaintel.appspot.com\",\n  messagingSenderId: \"366479663043\",\n  appId: \"1:366479663043:web:7549b2d2c0ada526382776\"\n};\nfirebase.initializeApp(firebaseConfig);\nvar Tab = createMaterialBottomTabNavigator();\nvar AuthTab = createBottomTabNavigator();\nvar Drawer = createDrawerNavigator();\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    \"sofia-pro\": require(\"./assets/fonts/sofia-pro-light.otf\")\n  });\n};\n\nvar onAuthStateChange = function onAuthStateChange(callback) {\n  return firebase.auth().onAuthStateChanged(function (user) {\n    callback({\n      loggedIn: user\n    });\n  });\n};\n\nimport { Sidebar } from \"./components/Sidebar\";\nexport default (function () {\n  var _React$useState = React.useState({\n    loggedIn: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      user = _React$useState2[0],\n      setUser = _React$useState2[1];\n\n  useEffect(function () {\n    var machadoCouto = onAuthStateChange(setUser);\n    return function () {\n      machadoCouto();\n    };\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dataLoaded = _useState2[0],\n      setDataLoaded = _useState2[1];\n\n  if (!dataLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        return setDataLoaded(true);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(NavigationContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, user.loggedIn ? React.createElement(Drawer.Navigator, {\n    drawerContent: function drawerContent(props) {\n      return React.createElement(Sidebar, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 53\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"Sensores\",\n    component: SensoresScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"Estat\\xEDsticas\",\n    component: DataScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  })) : React.createElement(AuthTab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          if (route.name == \"SignIn\") {\n            iconName = \"sign-in\";\n          } else if (route.name == \"SignUp\") {\n            iconName = \"user-plus\";\n          }\n\n          return React.createElement(FontAwesome, {\n            name: iconName,\n            size: size,\n            color: color,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 22\n            }\n          });\n        }\n      };\n    },\n    tabBarOptions: {\n      activeTintColor: \"white\",\n      inactiveTintColor: \"gray\",\n      tabStyle: {\n        height: 50,\n        backgroundColor: cor.azul\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, React.createElement(AuthTab.Screen, {\n    name: \"SignIn\",\n    component: SignInScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), React.createElement(AuthTab.Screen, {\n    name: \"SignUp\",\n    component: SignUpScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  })));\n});\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  tab: {\n    backgroundColor: cor.azul,\n    marginBottom: 2\n  },\n  name: {\n    color: \"#52A123\"\n  }\n});","map":{"version":3,"sources":["/home/czar/ipe/intelliplant/App.js"],"names":["React","useEffect","useState","Font","AppLoading","NavigationContainer","createBottomTabNavigator","createMaterialBottomTabNavigator","createDrawerNavigator","DrawerContentScrollView","SignInScreen","SignUpScreen","SensoresScreen","DataScreen","firebase","cor","FontAwesome","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","Tab","AuthTab","Drawer","fetchFonts","loadAsync","require","onAuthStateChange","callback","auth","onAuthStateChanged","user","loggedIn","Sidebar","setUser","machadoCouto","dataLoaded","setDataLoaded","props","route","tabBarIcon","color","size","iconName","name","activeTintColor","inactiveTintColor","tabStyle","height","backgroundColor","azul","styles","StyleSheet","create","container","flex","alignItems","justifyContent","tab","marginBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as Font from \"expo-font\";\nimport { AppLoading } from \"expo\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createMaterialBottomTabNavigator } from \"@react-navigation/material-bottom-tabs\";\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n} from \"@react-navigation/drawer\";\nimport SignInScreen from \"./screens/SignInScreen\";\nimport SignUpScreen from \"./screens/SignUpScreen\";\nimport SensoresScreen from \"./screens/SensoresScreen\";\nimport DataScreen from \"./screens/DataScreen\";\nimport {\n  View,\n  Text,\n  TextInput,\n  StyleSheet,\n  TouchableOpacity,\n} from \"react-native\";\nimport * as firebase from \"firebase\";\nimport cor from \"./constants/colors\";\nimport { FontAwesome } from \"@expo/vector-icons\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA9sAULTDVdnvTDYWJHTxHzsecrvMYV-T4\",\n  authDomain: \"plantaintel.firebaseapp.com\",\n  databaseURL: \"https://plantaintel.firebaseio.com\",\n  projectId: \"plantaintel\",\n  storageBucket: \"plantaintel.appspot.com\",\n  messagingSenderId: \"366479663043\",\n  appId: \"1:366479663043:web:7549b2d2c0ada526382776\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst Tab = createMaterialBottomTabNavigator();\nconst AuthTab = createBottomTabNavigator();\nconst Drawer = createDrawerNavigator();\n//const Background = require('/imgs/logo.jpeg');\n\nconst fetchFonts = () => {\n  return Font.loadAsync({\n    \"sofia-pro\": require(\"./assets/fonts/sofia-pro-light.otf\"),\n  });\n};\n\nconst onAuthStateChange = (callback) => {\n  return firebase.auth().onAuthStateChanged((user) => {\n    callback({ loggedIn: user });\n  });\n};\n\nimport { Sidebar } from \"./components/Sidebar\";\n\nexport default () => {\n  const [user, setUser] = React.useState({ loggedIn: false });\n  useEffect(() => {\n    const machadoCouto = onAuthStateChange(setUser);\n    return () => {\n      machadoCouto();\n    };\n  });\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  if (!dataLoaded) {\n    return (\n      <AppLoading\n        startAsync={fetchFonts}\n        onFinish={() => setDataLoaded(true)}\n      />\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      {user.loggedIn ? (\n        <Drawer.Navigator drawerContent={(props) => <Sidebar {...props} />}>\n          <Drawer.Screen name=\"Sensores\" component={SensoresScreen} />\n          <Drawer.Screen name=\"Estatísticas\" component={DataScreen} />\n        </Drawer.Navigator>\n      ) : (\n        <AuthTab.Navigator\n          screenOptions={({ route }) => ({\n            tabBarIcon: ({ color, size }) => {\n              let iconName;\n\n              if (route.name == \"SignIn\") {\n                iconName = \"sign-in\";\n              } else if (route.name == \"SignUp\") {\n                iconName = \"user-plus\";\n              }\n              return <FontAwesome name={iconName} size={size} color={color} />;\n            },\n          })}\n          tabBarOptions={{\n            activeTintColor: \"white\",\n            inactiveTintColor: \"gray\",\n            tabStyle: {\n              height: 50,\n              backgroundColor: cor.azul,\n            },\n          }}\n        >\n          <AuthTab.Screen name=\"SignIn\" component={SignInScreen} />\n          <AuthTab.Screen name=\"SignUp\" component={SignUpScreen} />\n        </AuthTab.Navigator>\n      )}\n    </NavigationContainer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  tab: {\n    backgroundColor: cor.azul,\n    marginBottom: 2,\n  },\n  name: {\n    color: \"#52A123\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}